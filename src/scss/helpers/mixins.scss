@mixin themed() {
  @each $theme, $map in $themes {
    .theme--#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), "#{$key}");
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@function t($key) {
  @return map-get($theme-map, $key);
}

@mixin respond-from($media) {
  @each $breakpoint in $breakpoints {
    @if $media == nth($breakpoint, 1) {
      @media (min-width: #{nth($breakpoint, 2)}) {
        @content;
      }
    }
  }
}

@mixin respond-to($media) {
  @for $i from 1 through length($breakpoints) {
    $breakpoint: nth($breakpoints, $i);
    $name: nth($breakpoint, 1);
    $value: nth($breakpoint, 2);

    @if $media == $name {
      @if $i == 1 {
        @media (max-width: #{$value}) {
          @content;
        }
      } @else if $i == length($breakpoints) {
        @media (min-width: #{$value}) {
          @content;
        }
      } @else {
        $next_breakpoint: nth($breakpoints, $i + 1);
        $next_name: nth($next_breakpoint, 1);
        $next_value: nth($next_breakpoint, 2);

        @media (min-width: #{$value}) and (max-width: #{$next_value - 1px}) {
          @content;
        }
      }
    }
  }
}

@mixin respond-until($media) {
  @each $breakpoint in $breakpoints {
    @if $media == nth($breakpoint, 1) {
      @media (max-width: #{nth($breakpoint, 2)}) {
        @content;
      }
    }
  }
}
